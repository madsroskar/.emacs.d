#+TITLE: Mads' Doom Emacs setup
#+EXPORT_FILE_NAME: README
#+STARTUP: overview
#+PROPERTY: header-args :results silent

While working on figuring out my own doom emacs setup, figuring out how elisp works,
and at the same time trying to figure out a little bit of org-mode as I go, I figured
I might as well try to document things a bit as I go.

* Better defaults
#+begin_src elisp
(setq-default
 ;; fill-column 120                         ; Set width for automatic line breaks
 gc-cons-threshold (* 8 1024 1024)      ; We're not using Game Boys anymore
 require-final-newline t
 initial-scratch-message ""             ; Empty the initial *scratch* buffer
 read-process-output-max (* 1024 1024)  ; Increase read size per process
 uniquify-buffer-name-style 'forward    ; Uniquify buffer names
 warning-minimum-level :warning)           ; Skip warning buffers
(fset 'yes-or-no-p 'y-or-n-p)           ; Replace yes/no prompts with y/n
(global-subword-mode 1)                 ; Iterate through CamelCase words
(mouse-avoidance-mode 'animate)           ; Avoid collision of mouse with point
(set-default-coding-systems 'utf-8)     ; Default to utf-8 encoding
;; (global-auto-revert-mode t) ; sounds a bit scary tbh..

#+end_src


* UI
For most applications I am able to, I've set Dracula as the theme, as
it looks nice, and has packages for a whole lot of applications
** Theme
I plan to make my own theme package at some point‚Ñ¢ to learn how that's done. For now though I just use a built-in Doom theme
#+BEGIN_SRC elisp
(setq doom-theme 'doom-tomorrow-night)
#+END_SRC


** font
#+begin_src elisp
(setq doom-font (font-spec :family "Hack Nerd Font" :size 16)
      doom-big-font (font-spec :family "Hack Nerd Font" :size 35))
#+end_src



** Modeline
*** Show the time and battery status in the modeline
#+begin_src elisp
;; (display-time-mode 1)
;; (unless (string-match-p "^Power N/A" (battery))
;;   (display-battery-mode 1))
#+end_src
** Frame
*** Set the style of the frame title
#+begin_src elisp
(setq frame-title-format
      '(""
        (:eval
         (let ((project-name (projectile-project-name)))
           (unless (string= "-" project-name)
             (format (if (buffer-modified-p)  " ‚óâ %s" " ‚ÄÜ‚óè‚ÄÜ %s") project-name))))))
#+end_src
*** Add a transparent background
I tried having a transparent background for my frame, but it seemed
like macOS wasn't all that much into it
#+begin_src elisp
;;(set-frame-parameter (selected-frame) 'alpha '(95 . 95))
;;(add-to-list 'default-frame-alist '(alpha . (95 . 95)))
#+end_src
*** Set the frame background color
#+begin_src elisp
(add-to-list 'default-frame-alist '(background-color . "#1d1f21"))
#+end_src

**

* Getting üí© done
As this is starting with minimal understanding of the details related to GTD, using the actual name is a bit premature.
However, adopting minimal chunks of it at the time will probably[fn:1] be more beneficial for me successfully building habits
needed to keep this up.

To start out, I will be =/(borrow|steal)ing/= some configuration from:
- [[github:rougler/emacs-gtd][rougler on GitHub]]

To summarize the basics as mentioned in his repository:
#+begin_quote
1. Capture anything that crosses your mind, nothing is too big or small.
2. Clarify what you‚Äôve captured into clear and concrete action steps.
3. Organize and put everything into the right place.
4. Review, update, and revise your lists.
5. Engage Get to work on the important stuff.
#+end_quote
** Basic setup
*** Set up inbox
#+begin_src elisp
(setq org-agenda-files (list "inbox.org"))
#+end_src
*** Set up simpler capture
#+begin_src elisp
(setq org-capture-templates
       `(("i" "Inbox" entry  (file "inbox.org")
        ,(concat "* TODO %?\n"
                 "/Entered on/ %U"))))
(define-key global-map (kbd "C-c c") 'org-capture)
#+end_src


* Notes
** Org-mode
*** Base org-mode directories
**** Base
#+BEGIN_SRC elisp
(setq org-directory "~/org/")
#+END_SRC
**** Agenda
#+begin_src elisp
;; (setq org-agenda-files '("~/org" "~/work/")) ;
#+end_src
*** Looks
Headline bullets
#+begin_src elisp
(setq
    org-superstar-headline-bullets-list '("‚Åñ" "‚óâ" "‚óã" "‚ú∏" "‚úø")
)
#+end_src
Line modes
#+begin_src elisp
;; (add-hook! org-mode :append
;;            #'visual-line-mode
;;            #'variable-pitch-mode)
#+end_src
*** Content
**** TODO Paste images (org-download-clipboard)
*** Keybinds
**** shiftmetaright
#+begin_src elisp
(map! :map org-mode-map
      :after org
      :n "M-l" #'org-shiftmetaright)
#+end_src

* Projects / workspaces
** Project management with projectile
Trying to get Projectile to get projects from my default search path,
but with varying luck
#+begin_src elisp
(setq projectile-project-search-path '("~/code"))
#+end_src

* Meta
** Me
#+BEGIN_SRC elisp
(setq user-full-name "Mads R√∏skar"
      user-mail-address "madshvero@gmail.com")

#+end_SRC
** Typing with norwegian characters in Emacs
Trick I was taught by @davazp in order to be able to type my name in emacs as =M-o=
on a US International keyboard is caught by an emacs binding, as well as being
one of our [[yt:https://www.youtube.com/watch?v=f488uJAQgmw][glorious scandinavian letters]]:

#+BEGIN_EXAMPLE
C-x RET C-\ norwegian-keyboard RET
#+END_EXAMPLE

* Languages
** TypeScript
*** Deno
**** Set up formatting for deno-related files
Adding hook for [[https://github.com/rclarey/deno-emacs][deno-fmt]]
#+begin_src elisp
(add-hook 'typescript-mode-hook 'deno-fmt-mode)
(add-hook 'js2-mode-hook 'deno-fmt-mode)
#+end_src

* System
** Common
*** Get PATH from the shell used for the system
#+begin_src elisp
(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))
#+end_src
** xterm
*** Don't set a window title
No reason either way for this really, just a short-term thing before I bother sorting this out
#+begin_src elisp
(after! xterm
  (setq xterm-set-window-title nil))
#+end_src
** MacOS
*** Use command as the Meta key
#+begin_src elisp
(when (eq system-type 'darwin)
  (setq mac-option-modifier 'meta))
(setq mac-command-modifier 'meta)
(setq mac-pass-command-to-system nil)
#+end_src
*** Don't pass command to system
#+begin_src elisp
(when (eq system-type 'darwin)
  (setq mac-option-modifier 'meta))
(setq mac-command-modifier 'meta)
(setq mac-pass-command-to-system nil)
#+end_src
*** Grab content from other apps
[[https://github.com/stuartsierra/org-mode/blob/master/contrib/lisp/org-mac-link.el][org-mac-link.el]]


[[https://github.com/stuartsierra/org-mode/blob/master/contrib/lisp/org-mac-link.el][org-mode/org-mac-link.el at master ¬∑ stuartsierra/org-mode]]


* Snippets
** Configuration
*** Snippet directories
#+begin_src elisp
(setq yas-snippet-dirs
      '("./snippets" ;; the yasmate collection
        ))

(yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.
#+end_src

** Template files
** Snippets per mode
*** org-mode
**** src
#+begin_src org :tangle ./snippets/org-mode/src
# -*- mode: snippet -*-
# name: #+begin_src
# uuid: src
# key: src
# --
,#+begin_src $1
$0
,#+end_src
#+end_src
**** quote
#+begin_src org :tangle ./snippets/org-mode/quote
# -*- mode: snippet -*-
# name: #+begin_quote
# uuid: quote
# key: quote
# --
,#+begin_quote $1
$0
,#+end_quote
#+end_src


* [[file:packages.org][Packages]]

** Company
#+begin_src elisp
(setq company-idle-delay 0.2
      company-minimum-prefix-length 3)
#+end_src

* Footnotes

[fn:1] In my experience, don't quote me on it
